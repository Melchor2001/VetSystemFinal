/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;

import config.Session;
import config.dbConnector;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author milan
 */
public class AppointmentForm extends javax.swing.JFrame {

    /**
     * Creates new form AddLoad
     */
    public AppointmentForm() {
        initComponents();
    }
    
    public boolean duplicateAppointmentCheck(String appointmentId, String petName, String reason) {
    dbConnector dbc = new dbConnector();
    
    try {
        // Query to check for duplicates in the appointment table
        String query = "SELECT * FROM appointment WHERE appointment_id = '" + appointmentId + "' OR pet_name = '" + petName + "' OR appointment_reason = '" + reason + "'";
        ResultSet resultSet = dbc.getData(query);
        
        if (resultSet.next()) {
            String existingId = resultSet.getString("appointment_id");
            if (existingId.equals(appointmentId)) {
                JOptionPane.showMessageDialog(null, "Appointment ID is already used!");
                return true;
            }

            String existingPet = resultSet.getString("pet_name");
            if (existingPet.equalsIgnoreCase(petName)) {
                JOptionPane.showMessageDialog(null, "Pet already has a scheduled appointment!");
                return true;
            }

            String existingReason = resultSet.getString("appointment_reason");
            if (existingReason.equalsIgnoreCase(reason)) {
                JOptionPane.showMessageDialog(null, "This appointment reason is already registered!");
                return true;
            }
        }
    } catch (SQLException ex) {
        System.out.println("Error: " + ex.getMessage());
    }

    return false; // No duplicate found
}


    public void logEvent(int userId, String username, String description) {
    dbConnector dbc = new dbConnector();
    Connection con = dbc.getConnection();
    PreparedStatement pstmt = null;

    try {
        // Fixed: include `log_description` in your INSERT
        String sql = "INSERT INTO tbl_log (u_id, u_username, login_time, u_type, log_status, log_description) VALUES (?, ?, ?, ?, ?, ?)";
        pstmt = con.prepareStatement(sql);

        pstmt.setInt(1, userId);
        pstmt.setString(2, username);
        pstmt.setTimestamp(3, new Timestamp(new Date().getTime())); // login_time
        pstmt.setString(4, "Success - User Action"); // u_type (general category)
        pstmt.setString(5, "Active"); // log_status
        pstmt.setString(6, description); // log_description (e.g., "User Reset Their Password")

        pstmt.executeUpdate();
        System.out.println("Log event recorded successfully.");
    } catch (SQLException e) {
        System.out.println("Error recording log: " + e.getMessage());
    } finally {
        try {
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + e.getMessage());
        }
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        AI = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        petName = new javax.swing.JTextField();
        breed = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        reason = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        sched = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Appointment ID");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 120, 30));

        AI.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        AI.setEnabled(false);
        jPanel1.add(AI, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 160, 30));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Pet Name ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 80, 30));
        jPanel1.add(petName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 160, 30));
        jPanel1.add(breed, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 160, 30));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setText("Breed");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, 80, 30));
        jPanel1.add(age, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, 160, 30));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel5.setText("Reason");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 280, 60, 30));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("ADD");
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 90, 30));

        jButton2.setText("UPDATE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 90, 30));

        jButton3.setText("DELETE");
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 140, 90, 30));

        jButton4.setText("CANCEL");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 90, 30));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 90, 240));
        jPanel1.add(reason, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, 160, 30));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel6.setText("Age");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 60, 30));

        sched.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Schedule", "Reschedule" }));
        jPanel1.add(sched, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 280, 100, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 600, 380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 String appointmentId = AI.getText().trim();  // Appointment ID
    String petNameStr = petName.getText().trim();
    String breedStr = breed.getText().trim();
    String ageStr = age.getText().trim();
    String reasonStr = reason.getText().trim();  // Assuming you have a JTextField or JTextArea for reason

    // Validation
    if (appointmentId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Error: Appointment ID is missing.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (petNameStr.isEmpty() || breedStr.isEmpty() || ageStr.isEmpty() || reasonStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        int ageInt = Integer.parseInt(ageStr);

        dbConnector dbc = new dbConnector();

        // Check if the appointment ID exists
        String checkQuery = "SELECT COUNT(*) FROM appointment WHERE appointment_id = ?";
        try (Connection conn = dbc.getConnection();
             PreparedStatement pst = conn.prepareStatement(checkQuery)) {

            pst.setString(1, appointmentId);
            ResultSet rs = pst.executeQuery();

            if (rs.next() && rs.getInt(1) == 0) {
                JOptionPane.showMessageDialog(this, "Appointment ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Update the appointment details
        String updateQuery = "UPDATE appointment SET pet_name = ?, pet_breed = ?, pet_age = ?, appointment_reason = ? WHERE appointment_id = ?";
        try (Connection conn = dbc.getConnection();
             PreparedStatement updatePst = conn.prepareStatement(updateQuery)) {

            updatePst.setString(1, petNameStr);
            updatePst.setString(2, breedStr);
            updatePst.setInt(3, ageInt);
            updatePst.setString(4, reasonStr);
            updatePst.setString(5, appointmentId);

            int updated = updatePst.executeUpdate();
            if (updated > 0) {
                JOptionPane.showMessageDialog(this, "Appointment updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                new ViewAllAppointments().setVisible(true); // Redirect to appointment list form
                this.dispose();  // Close this form
            } else {
                JOptionPane.showMessageDialog(this, "Update failed!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Age must be a valid number.", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (SQLException | HeadlessException ex) {
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }     // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         adminDashboard ads = new adminDashboard();
        ads.setVisible(true);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField AI;
    public javax.swing.JTextField age;
    public javax.swing.JTextField breed;
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    public javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public javax.swing.JTextField petName;
    public javax.swing.JTextField reason;
    javax.swing.JComboBox<String> sched;
    // End of variables declaration//GEN-END:variables
}
