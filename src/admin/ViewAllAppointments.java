/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package admin;

import config.dbConnector;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author milan
 */
public class ViewAllAppointments extends javax.swing.JFrame {

    /** Creates new form ViewAllAppointments */
    public ViewAllAppointments() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
     public void displayLoadData() {
    try {
        dbConnector dbc = new dbConnector();
        // Now include the status column in the SELECT query
        ResultSet rs = dbc.getData("SELECT appointment_id, pet_name, pet_breed, pet_age, appointment_reason, status, FROM appointment");
        
        // Set the table model to display load data
        pettbl.setModel(DbUtils.resultSetToTableModel(rs));  // Assuming load_tbl is your JTable
        
        rs.close();
    } catch (SQLException ex) {
        System.out.println("Errors: " + ex.getMessage());
    }
}

    
    DefaultTableModel model = new DefaultTableModel();

   public void tableChanged(TableModelEvent e) {
    if (e.getType() == TableModelEvent.UPDATE) {
        int row = e.getFirstRow();
        int column = e.getColumn();

        if (row == -1 || column == -1) {
            return; 
        }

        updateLoadDatabase(row, column); // You may need to define a similar update function for loads
    }

  String[] columnNames = {"appointment_id", "pet_name", "pet_breed", "pet_age", "appointment_reason", "status"};
model.setColumnIdentifiers(columnNames);
model.setRowCount(0);

String sql = "SELECT appointment_id, pet_name, pet_breed, pet_age, appointment_reason, status FROM appointment"; // include status here

try (Connection connect = new dbConnector().getConnection();
     PreparedStatement pst = connect.prepareStatement(sql);
     ResultSet rs = pst.executeQuery()) {

    while (rs.next()) {
        Object[] row = {
            rs.getInt("appointment_id"),
            rs.getString("pet_name"),
            rs.getString("pet_breed"),
            rs.getString("pet_age"),
             rs.getString("appointment_reason"),
            rs.getString("status") // add status here
        };
        model.addRow(row);
    }

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

}
   
   private void loadLoadsData() {
    DefaultTableModel model = (DefaultTableModel) pettbl.getModel();  // Assuming load_tbl is the JTable for loads
    model.setRowCount(0); // Clear the table before reloading

    // Include 'status' in the query
    String sql = "SELECT appointment_id, pet_name, pet_breed, pet_age, appointment_reason, status FROM appointment";

    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/sarns", "root", "");
         PreparedStatement pst = con.prepareStatement(sql);
         ResultSet rs = pst.executeQuery()) {

        // Iterate through ResultSet and add rows to the table
        while (rs.next()) {
            model.addRow(new Object[] {
                rs.getInt("appointment_id"),
                rs.getString("pet_name"),
                rs.getString("pet_breed"),
                rs.getString("pet_age"),
                  rs.getString("appointment_reason"),
                rs.getString("status")  // <-- Add status here
            });
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading load data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}


private void updateLoadDatabase(int row, int column) {
    try (Connection connect = new dbConnector().getConnection()) {
        String columnName = pettbl.getColumnName(column); // Get the column name
        String newValue = pettbl.getValueAt(row, column).toString(); // Get the updated value
        int loadId = Integer.parseInt(pettbl.getValueAt(row, 0).toString()); // Get the load ID from the first column

        String sql = "UPDATE appointment SET " + columnName + " = ? WHERE appointment_id = ?";
        try (PreparedStatement pst = connect.prepareStatement(sql)) {
            pst.setString(1, newValue); // Set the updated value
            pst.setInt(2, loadId); // Set the load ID for the row being updated
            pst.executeUpdate(); // Execute the update
            JOptionPane.showMessageDialog(null, "Appointment Updated Successfully!");
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}




    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pettbl = new javax.swing.JTable();
        update = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pettbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "pet name", "breed", "age", "reason", "status"
            }
        ));
        jScrollPane1.setViewportView(pettbl);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 730, 400));

        update.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        update.setText("UPDATE");
        update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateMouseClicked(evt);
            }
        });
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel1.add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 140, 40));

        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 20, 70, -1));

        jButton2.setText("Select");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        jButton3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton3.setText("REFRESH");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 150, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 810, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseClicked
        int selectedRow = pettbl.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a appointment to edit.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String username = pettbl.getValueAt(selectedRow, pettbl.getColumn("appointment_id").getModelIndex()).toString();

        if (username == null || username.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selected user has no appointment.", "Selection Error", JOptionPane.ERROR_MESSAGE);
            return;

        }
    }//GEN-LAST:event_updateMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
      int rowIndex = pettbl.getSelectedRow(); // Get the selected row index
if (rowIndex < 0) {
    JOptionPane.showMessageDialog(null, "Please select an appointment!");
    return;
}

try {
    dbConnector dbc = new dbConnector();
    TableModel tbl = pettbl.getModel();

    // Get appointment ID from selected row
    String appointmentId = tbl.getValueAt(rowIndex, 0).toString();

    if (appointmentId == null || appointmentId.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Selected appointment does not have a valid ID.");
        return;
    }

    // Query to fetch appointment details
    String query = "SELECT * FROM appointment WHERE appointment_id = ?";
    PreparedStatement pst = dbc.getConnection().prepareStatement(query);
    pst.setString(1, appointmentId);
    ResultSet rs = pst.executeQuery();

    if (rs.next()) {
        // Assuming AppointmentForm is your form to edit appointment
        AppointmentForm apptForm = new AppointmentForm();

        // Set fields from database into form
        apptForm.AI.setText(appointmentId);
        apptForm.petName.setText(rs.getString("pet_name"));
        apptForm.breed.setText(rs.getString("pet_breed"));
        apptForm.age.setText(String.valueOf(rs.getInt("pet_age")));
        apptForm.reason.setText(rs.getString("appointment_reason"));
        apptForm.sched.setSelectedItem(rs.getString("status"));

        apptForm.setVisible(true); // Show the form
        this.dispose(); // Optionally close current window

    } else {
        JOptionPane.showMessageDialog(null, "Appointment not found in the database.");
    }

} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Error occurred while retrieving appointment data: " + ex.getMessage(),
        "Database Error", JOptionPane.ERROR_MESSAGE);
}
  // TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        adminDashboard adminDashboard = new adminDashboard();
        adminDashboard.setVisible(true); // Show the AdminDashboard
        this.dispose();  // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      int selectedRow = pettbl.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an appointment from the table first.");
        return;
    }

    // Get appointment ID from the selected row (assume ID is in column 0)
    String appointmentId = pettbl.getValueAt(selectedRow, 0).toString();
    String petName = pettbl.getValueAt(selectedRow, 1).toString(); // Optional display

    // Open the Medical Record form and pass the appointment ID
    MedicalRecord medicalForm = new MedicalRecord();       
    medicalForm.setVisible(true);
    
    this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        loadLoadsData();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAllAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAllAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAllAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAllAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAllAppointments().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable pettbl;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

}
